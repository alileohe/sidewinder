/**
 * Copyright 2017 Ambud Sharma
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * 		http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.srotya.sidewinder.cluster.rpc";
option optimize_for = SPEED;

package rpcs;

import "binary.proto";

service ClusteredWriteService {

	rpc WriteSingleDataPoint (SingleData) returns (Ack) {}

	rpc WriteBatchDataPoint (BatchData) returns (Ack) {}
	
	rpc WriteSeriesPoint (RawTimeSeriesBucket) returns (Ack) {}
	
}

service ClusterReadService {

	rpc QueryData (Query) returns (QueryResponses) {}
	
	rpc GetDeltas (DeltaRequest) returns (DeltaResponse) {}
	
	rpc GetData (DataObject) returns (DataObject) {}

}

service ClusterMetadataService {

	rpc RequestRouteTableEntry (SingleData) returns (Ack) {}

}

message DeltaRequest {

	string dbName = 1;
	string measurementName = 2;
	string valueFieldName = 3;
	bool compact = 4;
	int64 startTime = 5;
	int64 endTime = 6;
	
}

message DeltaResponse {

	repeated DeltaObject object = 1;

}

message DeltaObject {

	string valueFieldName = 1;
	repeated Tag tags = 2;
	int32 bucket = 3;
	int32 writerCount = 4;
	int32 bucketSize = 5;
	bool fp = 6;
	repeated int32 writerDataPointCount = 7;
	repeated int32 writerBufferSize = 8;

}

message DataObject {

	string dbName = 1;
	string measurementName = 2;
	string valueFieldName = 3;
	repeated string tags = 4;
	bool fp = 5;
	int32 bucket = 6;
	repeated string buf = 7; 

}

message DP {
	
	int64 timestamp = 1;
	int64 value = 2;

}

message QueryResponses {

	repeated QueryResponse responses = 1;

}

message QueryResponse {

	string dbName = 1;
	string measurementName = 2;
	string valueFieldName = 3;
	bool fp = 4;
	repeated Tag tags = 5;
	int64 messageId = 6;
	repeated DP datapoints = 7;

}

message Query {

	string dbName = 1;
	string measurementName = 2;
	string valueFieldName = 3;
	int64 startTs = 4;
	int64 endTs = 5;
	bool fp = 6;
	string tagFilter = 7;
	int64 messageId = 8;
	bool direct = 9;

}

message SingleDataAck {

	string walId = 1;
	int32 offset = 2;
	Ack ack = 3;
	string nodeId = 4;

}

message BatchDataPointAck {

	int32 offset = 1;
	Ack ack = 2;
	string nodeId = 3;
	int32 maxBytes = 4;
	int32 fileId = 5;

}

message BatchDataPointResponse {

	bytes data = 1;
	int32 nextOffset = 2;
	Ack ack = 3;
	int32 fileId = 4;

}

message ListTimeseriesOffsetResponse {

	message OffsetEntry {
		message Bucket {
			int32 index = 1;
			int32 offset = 2;
			string bucketTs = 3;
			int64 headerTs = 4;
		}
	
		string valueFieldName = 1;
		repeated string tags = 2;
		repeated Bucket buckets = 3;
		
	}

	int64 messageId = 1;
	string dbName = 2;
	string measurementName = 3;
	repeated OffsetEntry entries = 4;
	
}

message ListTimeseriesOffsetRequest {

	int64 messageId = 1;
	string dbName = 2;
	string measurementName = 3;

}

message RawTimeSeriesBucketResponse {
	
	int64 messageId = 1;
	string dbName = 2;
	string measurementName = 3;
	string valueFieldName = 4;
	int64 blockTimestamp = 5;
	bool fp = 6;
	int32 bucketSize = 7;
	repeated Tag tags = 8;
	repeated Bucket buckets = 9;
	
}

message BatchRawTimeSeriesOffsetRequest {

	int64 messageId = 1;
	repeated RawTimeSeriesOffsetRequest requests = 2;
	
}

message BatchRawTimeSeriesOffsetResponse {

	int64 messageId = 1;
	repeated RawTimeSeriesOffsetResponse responses = 2;

}

message RawTimeSeriesOffsetRequest {

	int64 messageId = 1;
	string dbName = 2;
	string measurementName = 3;
	string valueFieldName = 4;
	int64 blockTimestamp = 5;
	repeated Tag tags = 6;
	int32 index = 7;
	int32 offset = 8;
	int32 bucketSize = 9;

}

message RawTimeSeriesOffsetResponse {

	int64 messageId = 1;
	string dbName = 2;
	string measurementName = 3;
	string valueFieldName = 4;
	int64 blockTimestamp = 5;
	repeated Tag tags = 6;
	bool fp = 7;
	int32 index = 8;
	int32 offset = 9;
	int32 bucketSize = 10;
	int32 count = 11;
	bytes data = 12;

}

message RawTimeSeriesBucketRequest {

	int64 messageId = 1;
	string dbName = 2;
	string measurementName = 3;
	string valueFieldName = 4;
	int64 blockTimestamp = 5;
	int32 timeBucketSize = 6;
	repeated Tag tags = 7;

}

